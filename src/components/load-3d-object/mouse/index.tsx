/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useRef, Suspense } from "react";
import { OrbitControls, Environment, useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { Canvas } from "@react-three/fiber";
const MOUSE = `${process.env.REACT_APP_S3_BASE_URL}/mouse.gltf`;

type GLTFResult = GLTF & {
  nodes: {
    Plane: THREE.Mesh;
    Plane_1: THREE.Mesh;
    Plane_2: THREE.Mesh;
    Plane_3: THREE.Mesh;
  };
  materials: any;
};

const MouseCanvas = () => {
  return (
    <Canvas>
      <Suspense fallback={null}>
        <Model />
        <OrbitControls enableZoom={true} enablePan={true} />
        <Environment preset="city" />
      </Suspense>
    </Canvas>
  );
};

export default MouseCanvas;

const Model = (props: JSX.IntrinsicElements["group"]) => {
  const group = useRef<THREE.Group>();
  const { nodes } = useGLTF(MOUSE) as GLTFResult;
  return (
    <group ref={group} {...props} dispose={null}>
      <group>
        <group
          name="top_panel"
          rotation={[-Math.PI / 2, 1e-8, 3.11177874]}
          scale={[100, 100, 100]}
          userData={{ name: "top_panel" }}
        >
          <mesh
            name="Plane"
            castShadow
            receiveShadow
            geometry={nodes.Plane.geometry}
            material={nodes.Plane.material}
          />
          <mesh
            name="Plane_1"
            castShadow
            receiveShadow
            geometry={nodes.Plane_1.geometry}
            material={nodes.Plane_1.material}
          />
          <mesh
            name="Plane_2"
            castShadow
            receiveShadow
            geometry={nodes.Plane_2.geometry}
            material={nodes.Plane_2.material}
          />
          <mesh
            name="Plane_3"
            castShadow
            receiveShadow
            geometry={nodes.Plane_3.geometry}
            material={nodes.Plane_3.material}
          />
        </group>
      </group>
    </group>
  );
};

useGLTF.preload(MOUSE);
